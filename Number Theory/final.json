 
  "Divisors": {
    "prefix": "Divisors",
    "body": [
      "vector<ll> Divisors;",
      "",
      "void Divisor(ll n)",
      "{",
      "    Divisors.clear();",
      "",
      "    for (int i = 1; (i * i) <= n; i++)",
      "    {",
      "        if (n % i == 0)",
      "        {",
      "            Divisors.push_back(i);",
      "            if (n / i != i)",
      "            {",
      "                Divisors.push_back(n / i);",
      "            }",
      "        }",
      "    }",
      "",
      "    sort(Divisors.begin(), Divisors.end());",
      "}"
    ],
    "description": "Divisors"
  },
  "OneToNDivisors": {
    "prefix": "OneToNDivisors",
    "body": [
      "",
      "vector<vector<ll>> Divisors(mx);",
      "",
      "void OneToNDivisors(ll n)",
      "{",
      "    for (int i = 1; i <= n; i++)",
      "    {",
      "        for (int j = i; j <= n; j += i)",
      "        {",
      "            Divisors[j].push_back(i);",
      "        }",
      "    }",
      "",
      "    // for (int i = 1; i <= n; i++)",
      "    // {",
      "    //     cout << i << \" : \";",
      "",
      "    //     for (auto u : Divisors[i])",
      "    //     {",
      "    //         cout << u << ' ';",
      "    //     }",
      "",
      "    //     cout << endl;",
      "    // }",
      "}"
    ],
    "description": "OneToNDivisors"
  },
  "isprime": {
    "prefix": "isprime",
    "body": [
      "bool isPrime(int n)",
      "{",
      "    if (n <= 1)",
      "        return false;",
      "    if (n <= 3)",
      "        return true;",
      "    if (n % 2 == 0 || n % 3 == 0)",
      "        return false;",
      "    for (int i = 5; i * i <= n; i = i + 6)",
      "        if (n % i == 0 || n % (i + 2) == 0)",
      "            return false;",
      "  ",
      "    return true;",
      "}"
    ],
    "description": "isprime"
  },
  "SieveOfEratosthenes": {
    "prefix": "sieve",
    "body": [
      "",
      "bitset<mx> is_prime;",
      "vector<int> primes;",
      "",
      "void sieve(int n)",
      "{",
      "    for (int i = 3; i <= n; i += 2)",
      "    {",
      "        is_prime[i] = 1;",
      "    }",
      "",
      "    for (int i = 3; (i * i) <= n; i += 2)",
      "    {",
      "        if (is_prime[i])",
      "        {",
      "            for (int j = (i * i); j <= n; j += (i + i))",
      "            {",
      "                is_prime[j] = 0;",
      "            }",
      "        }",
      "    }",
      "",
      "    is_prime[1] = 0;",
      "    is_prime[2] = 1;",
      "    primes.push_back(2);",
      "",
      "    for (int i = 3; i <= n; i += 2)",
      "    {",
      "        if (is_prime[i])",
      "        {",
      "            primes.push_back(i);",
      "        }",
      "    }",
      "}",
      ""
    ],
    "description": ""
  },
  "primefactorization": {
    "prefix": "primefactorization",
    "body": [
      "vector<ll> PrimeFactors;",
      "",
      "void PrimeFactorization(ll n)",
      "{",
      "    PrimeFactors.clear();",
      "    // Call Sieve Function First",
      "    for (auto p : primes)",
      "    {",
      "        if (1LL * p * p > n)",
      "        {",
      "            break;",
      "        }",
      "        else if (n % p == 0)",
      "        {",
      "            while (n % p == 0)",
      "            {",
      "                PrimeFactors.push_back(p);",
      "                n /= p;",
      "            }",
      "        }",
      "    }",
      "    if (n > 1)",
      "    {",
      "        PrimeFactors.push_back(n);",
      "    }",
      "}"
    ],
    "description": "primefector"
  },
  "OneToNPrimeFactors": {
    "prefix": "OneToNPrimeFactors",
    "body": [
      "vector<vector<ll>> PrimeFactors(mx);",
      "",
      "void PrimeFactorization(ll n)",
      "{",
      "    // Call Sieve Function First",
      "    for (auto p : primes)",
      "    {",
      "        for (int i = p; i <= n; i += p)",
      "        {",
      "            PrimeFactors[i].push_back(p);",
      "        }",
      "    }",
      "",
      "    for (int i = 1; i <= n; i++)",
      "    {",
      "        cout << i << \" : \";",
      "        for (auto u : PrimeFactors[i])",
      "        {",
      "            cout << u << ' ';",
      "        }",
      "        cout << endl;",
      "    }",
      "}"
    ],
    "description": "OneToNPrimeFactors"
  },